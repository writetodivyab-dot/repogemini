# scripts/analyze_log.py
import os
import sys
import textwrap
from google import genai
from google.genai import types
from github import Github

def generate_analysis_with_gemini(log_text: str) -> str:
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        raise RuntimeError("GEMINI_API_KEY not set in environment")

    client = genai.Client(api_key=api_key)

    # Prepare content: send the log as a plain text part plus an instruction
    contents = [
        types.Part.from_bytes(
            data=log_text.encode("utf-8"),
            mime_type="text/plain"
        ),
        "Analyze the Jenkins build log above. Summarize the error, possible root causes, and provide actionable fixes (concise, bullet points)."
    ]

    # Generate analysis
    resp = client.models.generate_content(
        model="gemini-2.5-pro",
        contents=contents,
        # You can change tokens/temperature as needed
        # config=types.GenerateContentConfig(...)  # optional
    )

    return resp.text or ""

def post_comment_to_pr(repo_full_name: str, pr_number: int, body: str, github_token: str):
    gh = Github(github_token)
    repo = gh.get_repo(repo_full_name)
    pr = repo.get_pull(pr_number)
    # Truncate if very large
    max_len = 60000
    if len(body) > max_len:
        body = body[:max_len] + "\n\n_(truncated)_"
    comment = f"**AI Build Log Analysis (generated by Gemini)**\n\n{body}"
    pr.create_issue_comment(comment)
    print(f"Posted AI analysis comment to PR #{pr_number} in {repo_full_name}")

def main():
    if len(sys.argv) < 2:
        print("Usage: python analyze_log.py <log_file_path>")
        sys.exit(1)

    log_file = sys.argv[1]
    if not os.path.exists(log_file):
        print(f"Log file not found: {log_file}")
        sys.exit(1)

    with open(log_file, "r", encoding="utf-8", errors="ignore") as f:
        log_text = f.read()

    # Generate AI analysis
    try:
        analysis = generate_analysis_with_gemini(log_text)
    except Exception as e:
        print("Error calling Gemini:", e)
        sys.exit(2)

    # Decide whether to post to PR or print to console / file
    github_token = os.getenv("GITHUB_TOKEN")
    repo_name = os.getenv("REPO_NAME")           # "owner/repo"
    pr_number = os.getenv("PR_NUMBER")           # PR number as string

    if github_token and repo_name and pr_number:
        try:
            post_comment_to_pr(repo_name, int(pr_number), analysis, github_token)
            print("Analysis posted to PR.")
        except Exception as e:
            print("Failed to post to GitHub:", e)
            # fallback to writing to file
            fallback_file = os.path.join(os.getcwd(), "ai_analysis_output.txt")
            with open(fallback_file, "w", encoding="utf-8") as out:
                out.write(analysis)
            print(f"Wrote analysis to {fallback_file}")
    else:
        # No PR context â€” write to file and print
        out_file = os.path.join(os.getcwd(), "ai_analysis_output.txt")
        with open(out_file, "w", encoding="utf-8") as out:
            out.write(analysis)
        print("PR info missing. Written AI analysis to", out_file)
        print("\n=== AI analysis ===\n")
        print(analysis)

if __name__ == "__main__":
    main()
